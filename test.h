#ifndef _TEST_H_
#define _TEST_H_
void test(void);

#endif

// 在 test.h 文件中使用条件编译指令 #ifndef、#define 和 #endif 是为了防止头文件被重复包含，
// 以避免重复定义的问题。这是一种常见的头文件保护机制。

// 然而，条件编译指令并不是用来进行链接的。链接是在编译器和链接器的操作中完成的，
// 它们负责将多个源文件编译成最终的可执行文件。条件编译指令只是用来控制在编译过程中哪些代码应该被编译，
// 哪些代码应该被忽略。

// 在你的情况下，#ifndef、#define 和 #endif 用于防止 test.h 文件被重复包含，
// 并且确保 test 函数的声明只被包含一次。这样做是为了避免重复定义的问题，
// 因为在多个源文件中引入同一个头文件时，如果不进行保护，就会导致重复的函数声明或定义。

// 在链接阶段，编译器会查找每个函数的定义，并将它们链接到最终的可执行文件中。
// 因此，在链接阶段，你需要确保 test 函数的定义在某个源文件中可见，以便编译器能够找到它并进行链接。

// 因此，条件编译指令在头文件中的作用是防止重复包含，而不是用于链接的目的。
// 在链接阶段，你需要确保函数的定义在合适的源文件中，并进行正确的编译和链接操作。









